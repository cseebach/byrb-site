// Generated by CoffeeScript 1.7.1
(function() {
  var addOpacity, frameToDegree, getFrame, lerp, timeToDegree,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  irunner.config(function($sceDelegateProvider) {
    return $sceDelegateProvider.resourceUrlWhitelist(["self", "https://byrb.s3.amazonaws.com/static/**"]);
  });

  window.irunnerController = function($scope, $location) {
    var fadeVideo, pivot, video;
    $scope.hoveredInjuries = [];
    $scope.injuries = window.injuries;
    $scope.selectedInjury = null;
    $scope.showThumb = true;
    $scope.videoClass = '';
    $scope.fadeClass = '';
    $scope.helpClass = '';
    $scope.help = {
      available: false
    };
    $scope.injuryNumbers = true;
    $scope.clickedAnywhere = false;
    $scope.instructions = window.instructions.text;
    $scope.disclaimer = false;
    $scope.mini_disclaimer = window.mini_disclaimer.text;
    $scope.full_disclaimer = window.full_disclaimer.text;
    $scope.mobile_alert = window.mobile_alert.text;
    video = document.getElementById("figureVideo");
    video.play();
    $scope.playVideo = function() {
      video = document.getElementById("figureVideo");
      return video.play();
    };
    $scope.pauseVideo = function() {
      video = document.getElementById("figureVideo");
      return video.pause();
    };
    $scope.pauseAudio = function() {
      var audio;
      audio = document.getElementById("ambient");
      return audio.pause();
    };
    $scope.playAudio = function() {
      var audio;
      audio = document.getElementById("ambient");
      return audio.play();
    };
    $scope.changeSelection = function(injury) {
      $scope.selectedInjury = injury;
      $scope.helpClass = "done";
      $scope.clickedAnywhere = true;
      return setTimeout(function() {
        return jQuery(".injury-info a").attr("target", "_blank");
      }, 100);
    };
    pivot = ($scope.injuries.length + 1) / 2;
    $scope.injuriesOne = $scope.injuries.slice(0, pivot);
    $scope.injuriesTwo = $scope.injuries.slice(pivot, $scope.injuries.length);
    $scope.videoClicked = function() {
      $scope.help.available = true;
      $scope.hoveredInjuries = [];
      $scope.injuryNumbers = true;
      $scope.selectedInjury = null;
      return $scope.clickedAnywhere = true;
    };
    $scope.openDisclaimer = function() {
      $scope.disclaimer = true;
      $scope.pauseVideo();
      return $scope.pauseAudio();
    };
    $scope.closeDisclaimer = function() {
      $scope.disclaimer = false;
      $scope.playVideo();
      return $scope.playAudio();
    };
    fadeVideo = function() {
      video = document.getElementById("figureVideo");
      if (video.currentTime > 0.3) {
        window.clearInterval($scope.playInterval);
        $scope.videoClass = "done";
        $scope.fadeClass = "done";
        document.getElementById("ambient").play();
        return $scope.$apply();
      }
    };
    return $scope.playInterval = window.setInterval(fadeVideo, 10);
  };

  timeToDegree = function(time) {
    var radians;
    radians = time * 0.62831853071 % (Math.PI * 2.0);
    return radians / 0.0174532925;
  };

  frameToDegree = function(frame) {
    return timeToDegree(frame / 5.0);
  };

  lerp = function(a, b, percent) {
    return a + percent * (b - a);
  };

  getFrame = function(coords, degree) {
    var early_frame, frame_no, late_frame, late_frame_no, next_original_degree, original_degree, percent, x, y, _i;
    for (frame_no = _i = 0; _i <= 50; frame_no = ++_i) {
      original_degree = frameToDegree(frame_no);
      next_original_degree = frameToDegree(frame_no + 1);
      if ((original_degree <= degree && degree < next_original_degree)) {
        early_frame = coords[frame_no];
        late_frame_no = frame_no + 1 < 50 ? frame_no + 1 : 0;
        late_frame = coords[late_frame_no];
        percent = (degree - original_degree) / (next_original_degree - original_degree);
        x = lerp(early_frame.x || 0, late_frame.x || 0, percent);
        x /= 1280;
        y = lerp(early_frame.y || 0, late_frame.y || 0, percent);
        y = (720 - y) / 720;
        return {
          x: x,
          y: y
        };
      }
    }
  };

  addOpacity = function(frames, startAngle, endAngle, degree) {
    var fadeSpeed, opacity;
    opacity = 0;
    fadeSpeed = 10.0;
    if (startAngle === 0 && endAngle >= 352.5) {
      opacity = 1.0;
    } else if ((startAngle <= degree && degree < startAngle + fadeSpeed)) {
      opacity = lerp(0.0, 1.0, (degree - startAngle) / fadeSpeed);
    } else if ((endAngle - fadeSpeed < degree && degree <= endAngle)) {
      opacity = lerp(0.0, 1.0, (degree - endAngle) / -fadeSpeed);
    } else if (startAngle > endAngle) {
      if (startAngle < degree || degree < endAngle) {
        opacity = 1.0;
      }
    } else if ((startAngle <= degree && degree <= endAngle)) {
      opacity = 1.0;
    }
    return frames[degree].opacity = opacity;
  };

  irunner.directive("irHighlight", function($window) {
    return {
      template: '<img src="{{highlight.image}}" ng-style="css" width="{{ imageWidth }}" height="{{ imageHeight }}">',
      restrict: 'E',
      scope: {
        highlight: "=highlight"
      },
      controller: function($scope, $interval) {
        $scope.css = {
          position: "fixed",
          top: -900,
          left: 0
        };
        $scope.initializeWindowSize = function() {
          var screenRatio, videoRatio;
          videoRatio = 16.0 / 9.0;
          screenRatio = $window.innerWidth / $window.innerHeight;
          if (screenRatio > videoRatio) {
            $scope.videoWidth = $window.innerHeight * videoRatio;
            $scope.left = ($window.innerWidth - $scope.videoWidth) / 2.0;
          } else {
            $scope.videoWidth = $window.innerWidth;
            $scope.left = 0;
          }
          $scope.imageWidth = ($scope.videoWidth * $scope.highlight.width) / 1280.0;
          $scope.css.width = $scope.imageWidth + "px";
          $scope.imageHeight = ($scope.videoWidth * $scope.highlight.height) / 1280.0;
          return $scope.css.height = $scope.imageHeight + "px";
        };
        $scope.setupFrames = function() {
          var degree, _i, _results;
          $scope.frames = (function() {
            var _i, _results;
            _results = [];
            for (degree = _i = 0; _i <= 359; degree = ++_i) {
              _results.push(getFrame($scope.highlight.coordinates, degree));
            }
            return _results;
          })();
          _results = [];
          for (degree = _i = 0; _i <= 359; degree = ++_i) {
            _results.push(addOpacity($scope.frames, $scope.highlight.start, $scope.highlight.end, degree));
          }
          return _results;
        };
        $scope.newPos = function() {
          var currentTime, degree, last_degree, next_degree, percent, x, y;
          currentTime = document.getElementById("figureVideo").currentTime;
          degree = timeToDegree(currentTime);
          last_degree = Math.floor(degree);
          next_degree = Math.ceil(degree) % 360;
          percent = degree - last_degree;
          x = lerp($scope.frames[last_degree].x, $scope.frames[next_degree].x, percent);
          y = lerp($scope.frames[last_degree].y, $scope.frames[next_degree].y, percent);
          $scope.css.opacity = $scope.frames[last_degree].opacity;
          x *= $scope.videoWidth;
          x -= $scope.imageWidth / 2.0;
          x += $scope.left;
          y *= $scope.videoWidth * (9.0 / 16.0);
          y -= $scope.imageHeight / 2.0;
          $scope.css.top = "" + y + "px";
          return $scope.css.left = "" + x + "px";
        };
        angular.element($window).bind('resize', function() {
          $scope.initializeWindowSize();
          return $scope.$apply();
        });
        $scope.setupFrames();
        $scope.initializeWindowSize();
        $scope.posInterval = $interval($scope.newPos, 30);
        return $scope.$on("destroy", function() {
          return $interval.cancel($scope.posInterval);
        });
      }
    };
  });

  irunner.directive("irHighlightHoverArea", function($window) {
    return {
      template: '<div ng-style="css"><h5 class="sci-fi" ng-show="!selectedInjury" ng-bind="childText" ng-style="childCss"></h4></div>',
      restrict: 'E',
      scope: {
        injuries: "=injuries",
        selectedInjury: "=selected",
        clickedAnywhere: "=clickedAnywhere",
        hvInjuries: "=hvInjuries"
      },
      controller: function($scope, $element) {
        $scope.css = {
          position: "fixed",
          width: "10%",
          left: "45%"
        };
        $scope.childCss = {
          position: "fixed",
          left: "55%"
        };
        $scope.childText = "";
        $element.bind("mousedown", function(event) {
          var regionNo;
          regionNo = Math.floor((event.pageY / $scope.windowHeight) * $scope.regions.length);
          console.log(regionNo, $scope.regions[regionNo]);
          $scope.hvInjuries = $scope.regions[regionNo];
          $scope.showNumbers = false;
          $scope.clickedAnywhere = true;
          return $scope.$apply();
        });
        $element.bind("mousemove", function(event) {
          var regionNo;
          regionNo = Math.floor((event.pageY / $scope.windowHeight) * $scope.regions.length);
          if ($scope.regions[regionNo].length > 0) {
            if ($scope.regions[regionNo].length === 1) {
              $scope.childText = "1 Injury Associated With This Area";
            } else {
              $scope.childText = $scope.regions[regionNo].length + " Injuries Associated With This Area";
            }
            $scope.childCss.top = (regionNo / $scope.regions.length) * $scope.windowHeight + 15 + "px";
          } else {
            $scope.childText = "";
          }
          return $scope.$apply();
        });
        $element.bind("mouseleave", function(event) {
          $scope.childText = "";
          return $scope.$apply();
        });
        $scope.findY = function(highlight) {
          var degree, frames;
          frames = (function() {
            var _i, _results;
            _results = [];
            for (degree = _i = 0; _i <= 359; degree = ++_i) {
              _results.push(getFrame(highlight.coordinates, degree));
            }
            return _results;
          })();
          return frames[Math.floor(highlight.start)].y;
        };
        $scope.initializeWindowSize = function() {
          var highlight, i, injury, regionNo, section, _i, _j, _len, _ref, _results;
          $scope.windowWidth = $window.innerWidth;
          $scope.windowHeight = $scope.windowWidth * (9.0 / 16.0);
          $scope.regionTop = $scope.windowHeight * .1;
          $scope.regionHeight = $scope.windowHeight * .9;
          $scope.css.top = $scope.regionTop + "px";
          $scope.css.height = $scope.regionHeight + "px";
          $scope.regions = [];
          for (i = _i = 0; _i <= 15; i = ++_i) {
            $scope.regions.push([]);
          }
          _ref = $scope.injuries;
          _results = [];
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            injury = _ref[_j];
            if (injury.hoverable) {
              if (injury.sections && injury.sections.length > 0) {
                _results.push((function() {
                  var _k, _len1, _ref1, _results1;
                  _ref1 = injury.sections;
                  _results1 = [];
                  for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
                    section = _ref1[_k];
                    _results1.push($scope.regions[section].push(injury));
                  }
                  return _results1;
                })());
              } else {
                _results.push((function() {
                  var _k, _len1, _ref1, _results1;
                  _ref1 = injury.highlights;
                  _results1 = [];
                  for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
                    highlight = _ref1[_k];
                    regionNo = Math.floor($scope.findY(highlight) * $scope.regions.length);
                    if (__indexOf.call($scope.regions[regionNo], injury) < 0) {
                      _results1.push($scope.regions[regionNo].push(injury));
                    } else {
                      _results1.push(void 0);
                    }
                  }
                  return _results1;
                })());
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
        angular.element($window).bind('resize', function() {
          $scope.initializeWindowSize();
          return $scope.$apply();
        });
        return $scope.initializeWindowSize();
      }
    };
  });

  irunner.directive('fitToScreen', function($window) {
    return function($scope) {
      $scope.initializeWindowSize = function() {
        var screenRatio, videoRatio;
        videoRatio = 16.0 / 9.0;
        screenRatio = $window.innerWidth / $window.innerHeight;
        if (screenRatio > videoRatio) {
          $scope.height = $window.innerHeight;
          $scope.width = $scope.height * videoRatio;
          $scope.left = ($window.innerWidth - $scope.width) / 2.0;
        } else {
          $scope.height = $window.innerWidth / videoRatio;
          $scope.width = $window.innerWidth;
          $scope.left = 0;
        }
        return $scope.fitStyle = {
          position: 'fixed',
          left: $scope.left,
          width: $scope.width,
          height: $scope.height
        };
      };
      $scope.initializeWindowSize();
      return angular.element($window).bind('resize', function() {
        $scope.initializeWindowSize();
        return $scope.$apply();
      });
    };
  });

}).call(this);

//# sourceMappingURL=irunner.map
